# 조건문
# 조건문은 프로그램의 흐름을 제어하는 문법이다.
# 조건문을 이용해 조건에 따라서 프로그램의 로직을 설정할 수 있다.

from re import I


x = 15
if x >= 10:
    print("x >= 10")

if x >= 0:
    print("x >= 0")

if x >= 30:
    print("x = 30")

# 들여쓰기
# 파이썬에서는 코드의 블록(Block)을 들여쓰기(Indent)로 지정한다.
# 다음의 코드에서 마지막 라인은 무조건 실행됩니다.

score = 85

if score >= 70:
    print('성적이 70점 이상입니다.')
    if score >= 90:
        print('우수한 성적입니다.')
else:
    print('성적이 70점 미만입니다.')
    print('조금 더 분발하세요')

print('프로그램을 종료합니다.')

# 탭을 사용하는 쪽과 공백 문자(space)를 여러 번 사용하는 쪽으로 두 진영이 있습니다.
# 이에 대한 논쟁은 지금까지도 활발하다.
# 파이썬 스타일 가이드라인에서는 4개의 공백 문자를 사용하는 것을 표준으로 설정하고 있다.

# 조건문의 기본 형태
# 조건문의 기본적인 형태는 if ~ elif ~ else
# 조건문을 사용할 때 elif 혹은 else 부분은 경우에 따라서 사용하지 않아도 됨.

a = 5

if a >= 0:
    print("a >= 0")
elif a >= -10:
    print("0 > a >= -10")
else:
    print("-10 >= a")

# 비교 연산자
# 비교 연산자는 특정한 두 값을 비교할 때 이용가능.
# 대입 연산자(=)와 같음 연산자(==)의 차이점에 유의.

# 논리 연산자
# 논리 연산자는 논리 값(True/False) 사이의 연산을 수행할 때 사용한다.
# X and Y : 모두 참이어야 참
# X or Y : 하나만 참이면 참
# not X : X가 거짓일 때 참

# 파이썬의 기타 연산자
# 다수의 데이터를 담는 자료형을 위해 in 연산자와 not in 연산자가 제공된다.
# 리스트, 튜플, 문자열, 딕셔너리 모두에서 사용이 가능하다.
# X in 리스트 : 리스트 안에 X가 들어가 있을 때 참이다.
# X not in 문자열 : 문자열 안에 X가 들어가 있지 않을 때 참이다.

# 파이썬의 pass 키워드
# 아무것도 처리하고 싶지 않을 때 pass 키워드를 사용한다.
# 예시) 디버깅 과정에서 일단 조건문의 형태만 만들어 놓고 조건문을 처리하는 부분은 비워놓고 싶은 경우
score = 85

if score >= 80:
    pass # 나중에 작성할 소스코드
else:
    print('성적이 80점 미만입니다.')

print('프로그램을 종료합니다.')

# 조건문의 간소화
# 조건문에서 실행될 소스코드가 한 줄인 경우, 굳이 줄 바꿈을 하지 않고도 간략하게 표현할 수 있다.

score = 85

if score >= 80: result = "Success"
else: result = "Fail"

# 조건부 표현식(Conditional Expression)은 if ~ else문을 한 줄에 작성할 수 있도록 해줍니다.

score = 85
result = "Success" if score >= 80 else "Fail"

print(result)

# 파이썬 조건문 내에서의 부등식
# 다른 프로그래밍 언어와 다르게 파이썬은 조건문 안에서 수학의 부등식을 그대로 사용할 수 있다.
# 예를 들어 x > 0 and x < 20과 0 < x < 20은 같은 결과를 반환한다.

# 코드 스타일 1
x = 15
if x > 0 and x < 20:
    print('x는 0 이상 20 미만의 수입니다.')

# 코드 스타일 2
x = 15
if 0 < x < 20:
    print('x는 0 이상 20 미만의 수입니다.')

# 본 책에서는 다른 언어를 다룰 때 헷갈리지 않도록 x > 0 and x < 20와 같이 비교 연산자 사이에
# and, or 등의 연산자가 들어가는 형태의 코드를 이용한다.

# 반복문
# 특정한 소스코드를 반복적으로 실행하고자 할 때 사용하는 문법이다.
# 파이썬에서는 while문과 for문이 있는데, 어떤 것을 사용해도 상관 없다.
# 다만 코딩 테스트에서의 실제 사용 예시를 확인해 보면, for문이 더 간결한 경우가 많다.

# 1부터 9까지 모든 정수의 합 구하기 예제(while문)
i = 1
result = 0

# i가 9보다 작거나 같을 때 아래 코드를 반복적으로 실행
while i <= 9:
    result += i
    i += 1

print(result)