# 문자열 자료형
# 문자열 변수를 초기화 할 때는 큰 따옴표(")나 작은 따옴표(')를 이용합니다.
# 문자열 안에 큰 따옴표나 작은 따옴표가 포함되어야 하는 경우
#  1) 전체 문자열을 큰 따옴표로 구성하는 경우, 내부적으로 작은 따옴표를 포함 가능.
#  2) 전체 문자열을 작은 따옴표로 구성하는 경우, 내부적으로 큰 따옴표를 포함 가능.
#  3) 혹은 백슬래시(\)를 사용하면, 큰 따옴표나 작은 따옴표를 원하는 만큼 포함 가능.
#     백슬래시 : 이스케이프 문자.

data = 'Hello World'
print(data)

data = "Don't you know \"python\"?"
print(data)

# 문자열 연산
# 문자열 변수에 덧셈을 이용하면 문자열이 더해져서 연결됨
# 문자열 변수를 특정한 양의 정수와 곱하는 경우, 문자열이 그 값만큼 여러 번 더해진다.
# 문자열에 대해서도 마찬가지로 인덱싱과 슬라이싱 이용 가능.
# 다만 문자열은 특정 인덱스의 값을 변경할 수는 없습니다.

a = "Hello"
b = "World"
print(a + " " + b)
print(a, b)

a = "STring"
print(a * 3)

a = "ABCDEF"
print(a[2:4])
# a[2] = "b" # 문자열 값을 바꿀 수 없다.
print(a)

# 튜플 자료형
# 리스트와의 문법적 차이
# 1) 튜플은 한 번 선언된 값을 변경할 수 없다.
# 2) 리스트는 대괄호([])를 이요하지만, 튜플은 소괄호(())를 이용한다.
# 튜플은 리스트에 비해 상대적으로 공간 효율적이다.

a = (1, 2, 3, 4, 5, 6, 7, 8, 9)

# 네 번째 원소만 출력
print(a[3])

# 두 번째 원소부터 네 번째 원소까지
print(a[1:4])

# a[2] = 7 # 오류

# 튜플을 사용하면 좋은 경우
# 서로 다른 성질의 데이터를 묶어서 관리해야 할 때
#  - 최단 경로 알고리즘에서는 (비용, 노드 번호)의 형태로 튜플 자료형을 자주 사용한다.
# 데이터의 나열을 해싱(hashing)의 키 값으로 사용해야 할 때
#  - 튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용 가능.
# 리스트보다 메모리를 효율적으로 사용해야 할 때