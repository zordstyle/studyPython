# 리스트 자료형
# 여러 개의 데이터를 연속적으로 담아 처리하기 위해 사용하는 자료형이다.
# 사용자 입장에서 C나 자바에서의 배열(Array)의 기능 및 Linked List와 유사한 기능을 지원한다.
# C++의 STL vector와 기능적으로 유사하다.
# 리스트 대신에 배열 혹은 테이블이라고 부르기도 한다.
# append, delete 등 유용한 기능 지원
# 리스트 초기화 : 대괄호([])안에 원소를 넣고 쉼표(,)로 원소를 구분
# 리스트의 원소에 접근할 때는 인덱스(Index)값을 괄호에 넣는다(인덱스는 0부터 시작)

# 직접 데이터를 넣어 초기화
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a)

# 네 번째 원소만 출력
print(a[3])

# 크기가 N이고, 모든 값이 0인 1차원 리스트 초기화
n = 10
a = [0] * n
print(a)

# 특정 값 바꾸기
a[4] = 4
print(a)

# 리스트의 인덱싱과 슬라이싱
# 인덱싱 :  인덱스 값을 입력하여 리스트의 특정한 원소에 접근하는 것
# 파이썬의 인덱스 값은 양의 정수와 음의 정수를 모두 사용할 수 있다.
# 음의 정수를 넣으면 원소를 거꾸로 탐색하게 된다. (-1부터 차례대로 작아진다)

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# 여덟 번째 원소만 출력
print(a[7])

# 뒤에서 첫 번째 원소 출력
print(a[-1])

# 뒤에서 세 번째 원소 출력
print(a[-3])

# 네 번째 원소 값 변경
a[3] = -7
print(a)

# 슬라이싱 : 리스트에서 연속적인 위치를 갖는 원소들을 가져와야 할 때는 슬라이싱을 이용한다.
# 대괄호 안에 콜론(:)을 넣어서 시작 인덱스와 끝 인덱스를 설정할 수 있다.
# 끝 인덱스는 실제 인덱스보다 1을 더 크게 설정한다.

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# 네 번째 원소만 출력
print(a[3])
 
# 두 번째 원소부터 네 번째 원소까지
print(a[1:4])

# List Comprehension : 리스트를 초기화 하는 방법 중 하나
# 대괄호 안에 조건문과 반복문을 적용하여 리스트를 초기화 할 수 있다.

# 0~9의 수를 포함하는 리스트
array = [i for i in range(10)]
print(array)

# 0~49
a = [i for i in range(50)]
print(a)

# 0~19의 수 중에서 홀수만 포함하는 리스트
array = [i for i in range(20) if i & 2 == 1]
print(array)

# 1부터 9까지의 수들의 제곱 값을 포함하는 리스트
array = [i * i for i in range(1, 10)]
print(array)

# 코드1 : List Comprehension
array = [i for i in range(20) if i % 2 == 1]
print(array)

# 코드2 : 일반적인 코드
array = []
for i in range(20):
    if i % 2 == 1:
        array.append(i)

print(array)

## List Comprehension은 2차원 리스트를 초기화 할 때 효과적으로 사용될 수 있다.
# N * M 크기의 2차원 리스트를 한 번에 초기화 해야할 때 매우 유용하다. (문제 상황이 이래서 유용)
# ex. array = [[0] * m for _ in range(n)]
# 잘못된 예시 : array = [[0] * m] * n 
# (전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식됨, 참조값을 복사하는 것)