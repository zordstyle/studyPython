# 정수형(Integer) : 정수를 다루는 자료형
# 코딩 테스트에서 출제되는 많은 문제들은 정수형을 주로 다루게 된다.

# 양의 정수
a = 1000
print(a)

# 음의 정수
a = -7
print(a)

# 0
a = 0
print(a)

import sys
print(sys.version)

# 값 증가
a = a + 5
print(a)

# 실수형 : 소수점 아래의 데이터를 포함하는 수 자료형
# 파이썬에서는 변수에 소수점을 붙인 수를 대입하면 실수형 변수로 처리됨
# 소수부가 0이거나, 정수부가 0인 소수는 0을 생략하고 작성할 수 있다.

# 양의 실수
a = 157.93
print(a)

# 음의 실수
a = -1837.2
print(a)

# 소수부가 0일 때 0을 생략
a = 5.
print(a)

# 정수부가 0일 때 0을 생략
a = -.7
print(a)

# 지수 표현 방식
# 파이썬에서는 e나 E를 이용한 지수 표현 방식을 이용한다.
# e나 E 다음에 오는 10의 지수부를 의미한다.
# 유효숫자e^(지수) = 유효숫자 * 10^(지수)
# ex. 1e9 = 10의 9제곱(10억)
# 지수 표현 형태는 실수형으로 처리됨
# 최단 경로 알고리즘에서 도달할 수 없는 노드에 대하여 최단 거리를 무한(INF)로 설정하곤 한다.
# 이때 가능한 최대값이 10억 미만이라면 무한(INF)의 값으로 1e9를 이용 가능.

# 1,000,000,000의 지수 표현 방식
a = 1e9
print(a)

# 정수데이터로 변환
a = int(1e9)
print(a)

# 752.5
a = 75.25e1
print(a)

# 3.954
a = 3954e-3

# IEEE754 표준에서는 실수형을 저장하기 위해 4or8바이트의 고정된 크기의 메모리를 할당하기 때문에
# 컴퓨터 시스템은 실수 정보를 표현하는 정확도에 한계를 가진다.
# 예를 들어 10진수 체계에서는 0.3과 0.6을 더한 값이 0.9로 정확히 떨어진다.
# 하지만 2진수에서는 0.9를 정확히 표현할 방법이 없고, 컴퓨터는 최대한 0.9와 가깝게 표현하는 것일 뿐 미세한 오차가 발생한다.
a = 0.3 + 0.6
print(a) # 0.8999999999999999

if a == 0.9:
    print(True)
else:
    print(False)

# 실제 개발 과정에서도 일어날 수 있는 일.
# 이럴 때는 round()함수를 이용할 수 있다.
# ex. 123.456을 소수 셋째 자리에서 반올림 하려면  round(123.456, 2)라고 작성(결과 : 123.46)

a = 0.3 + 0.6
print(round(a, 4)) # 0.9

if round(a, 4) == 0.9:
    print(True)
else:
    print(False)

# 수 자료형의 연산
# 나누기 연산자(/)는 나눠진 결과를 실수형으로 반환한다.
# 다양한 로직을 설계할 때는 나머지 연산자(%)를 이용해야 할 때가 많다.
# 파이썬에서는 몫을 얻기 위해 몫 연산자(//)를 사용한다.
# 이 외에도 거듭 제곱 연산자(**)를 비롯해 다양한 연산자들이 존재한다.

a = 7
b = 3

# 나누기
print(a / b)

# 나머지
print(a % b)

# 몫
print(a // b)

a = 5
b = 3

# 거듭 제곱
print (a ** b)

# 제곱근
print (a ** 0.5)