# 그리디 알고리즘
# 현재 상황에서 지금 당장 좋은 것만 고르는 방법을 의미
# 일반적인 그리디 알고리즘은 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력을 요구.
# 그리디 해법은 그 정당성 분석이 매우 중요함.
#  - 단순히 가장 좋아 보이는 것을 반복적으로 선택해도
#    최적의 해를 구할 수 있는지를 검토한다.

# 일반적인 상황에서 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많다.
# 하지만 코딩테스트에서의 대부분 그리디 문제는 그리디 알고리즘을 얻은 해가
# 최적의 해가 되는 상황에서, 이를 추론할 수 있어야 풀리도록 출제된다.

# 예제 : 거스름 돈
# 음식점의 계산을 도와주는 점원
# 카운터에는 거스름돈으로 사용할 500원, 100원, 50원, 10원 짜리 동잔이 무한히 존재한다고 가정.
# 손님에게 거슬러주어야 할 돈이 N원일 때 거슬러 주어야 할 동전의 최소 개수를 구하기.
# 단, 거슬러 줘야 할 돈 N은 항상 10의 배수이다.

# 문제 해결 아이디어
# 최적의 해를 빠르게 구하기 위해서는 가장 큰 화폐 단위부터 돈을 거슬러 주면 된다.
# N원을 거슬러 줘야 할 때, 가장 먼저 500원으로 거슬러 줄 수 있을 만큼 거슬러 준다.
# 이후에 100원, 50원, 10원 짜리 동전을 차례대로 거슬러 줄 수 있을 만큼 거슬러 주면 된다.
# N = 1260일 때의 예시
# 500원 : 2개 / 100원 : 2개 / 50원 : 1개 / 10원 : 1개
# 파이썬 답안 예시
n = 1260
count = 0

# 큰 단위의 화폐부터 차례대로 확인하기
array = [500 ,100, 50, 10]

for coin in array:
    count += n // coin # 해당 화폐로 거슬러 줄 수 있는 동전의 개수 세기
    n %= coin

print(count)

# 정당성 분석 : 왜 가장 큰 화폐 단위부터 돈을 거슬러 주는 것이 최적의 해를 보장하는가?
#  - 가지고 있는 동전 중에서 큰 단위게 항상 작은 단위의 배수이므로
#    작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문이다.
# 그렇다면 만약에 800원을 거슬러 주어야 하는데 화폐 단위가 500원, 400원, 100원이라면?
#  -> 다음의 경우는 큰 단위가 항상 작은 단위의 배수가 아니기 때문에 해당 컨셉으로는 불가능
# 그리디 알고리즘 문제에서는 문제 풀이를 위한 최소한의 아이디어를 떠올리고
# 이것이 정당한지 검토할 수 있어야 한다.

# 거스름 돈 문제의 시간 복잡도 분석
# 화폐의 종류가 K라고 할 때, 소스코드의 시간 복잡도는 O(K)이다.
# 이 알고리즘의 시간 복잡도는 거슬러줘야 하는 금액과 무관하며, 동전의 총 종류에만 영향을 받는다.